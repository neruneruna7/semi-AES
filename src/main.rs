use std::{
    cell::{OnceCell, RefCell},
    fmt::Debug,
    ptr::copy_nonoverlapping,
    rc::Rc,
    sync::{Arc, LazyLock, OnceLock},
};

const NB: usize = 4;
const NB_B: usize = 16;
const NK: usize = 4;
const NR: usize = NK + 6;

use std::sync::Mutex;

static W: LazyLock<Arc<Mutex<[usize; 60]>>> = LazyLock::new(|| Arc::new(Mutex::new([0; 60])));

fn main() {
    let keys: [u8; 32] = [
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
        0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
        0x1e, 0x1f,
    ];
    let init: [u8; 16] = [
        0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee,
        0xff,
    ];

    key_expansion(&keys);
    let mut key = [0u8; 32];
    for i in 0..16 {
        key[i] = keys[i];
    }

    let mut data = [0usize; 4];
    for i in 0..4 {
        data[i] = u32::from_be_bytes([
            init[i * 4],
            init[i * 4 + 1],
            init[i * 4 + 2],
            init[i * 4 + 3],
        ]) as usize;
    }

    datadump("PLAIN TEXT:\t", &data, 4);
    datadump("KEY:\t\t", &key, 4);

    cipher(&mut data);
}

// デバッグ表示可能なものを要素に持つ配列の中身を表示する
fn datadump(c: &str, dt: &[impl Debug], len: usize) {
    print!("{}: ", c);
    for i in 0..len {
        print!("{:02x?} ", dt[i]);
    }
    println!();
}
const S_BOX: [u8; 256] = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
];

const INV_S_BOX: [u8; 256] = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
];

// 暗号化
fn cipher(data: &mut [usize]) -> isize {
    add_round_key(data, 0);
    datadump("mid:\t", data, 4);

    for i in 1..NR {
        sub_bytes(data);
        shift_rows(data);
        mix_columns(data);
        add_round_key(data, i);

        datadump("mid:\t", data, 4);
    }

    sub_bytes(data);
    shift_rows(data);
    add_round_key(data, NR);
    datadump("mid:\t", data, 4);
    todo!()
}

// 復号化
fn inv_cipher(data: &[usize]) -> isize {
    todo!()
}

fn sub_bytes(data: &mut [usize]) {
    // 理論的な意味から二重ループにしている．が，意味はない．
    unsafe {
        // バイト単位の可変ポインタにキャスト
        let cb = data.as_mut_ptr() as *mut u8;
        for i in (0..NB_B).step_by(4) {
            for j in 0..4 {
                // このaddメソッドは，offset(i+j as isize)と同じ
                // data[i+j]的なことをしている
                *cb.add(i + j) = S_BOX[*cb.add(i + j) as usize];
            }
        }
    }
}

fn inv_sub_bytes(data: &mut [usize]) {
    unsafe {
        let cb = data.as_mut_ptr() as *mut u8;
        for i in (0..NB_B).step_by(4) {
            for j in 0..4 {
                *cb.add(i + j) = INV_S_BOX[*cb.add(i + j) as usize];
            }
        }
    }
}

fn shift_rows(data: &mut [usize]) {
    let mut i4 = 0;
    unsafe {
        let cb = data.as_mut_ptr() as *mut u8;
        let mut cw = [0u8; NB_B];
        // コピー元，コピー先，コピーする長さ なのでCのmemcpyと引数の順番が逆
        copy_nonoverlapping(cb, cw.as_mut_ptr(), cw.len());
        for i in (0..NB).step_by(4) {
            i4 = i * 4;
            for j in 1..4 {
                cw[i4 + j + 0 * 4] = *cb.add(i4 + j + ((j + 0) & 3) * 4);
                cw[i4 + j + 1 * 4] = *cb.add(i4 + j + ((j + 1) & 3) * 4);
                cw[i4 + j + 2 * 4] = *cb.add(i4 + j + ((j + 2) & 3) * 4);
                cw[i4 + j + 3 * 4] = *cb.add(i4 + j + ((j + 3) & 3) * 4);
            }
        }
        copy_nonoverlapping(cw.as_mut_ptr(), cb, cw.len());
    }
}

fn mul(dt: usize, n: usize) -> usize {
    let mut x = 0;
    let mut i = 0;
    while i > 0 {
        x <<= 1;
        if x & 0x100 != 0 {
            x = (x ^ 0x11b) & 0xff;
        }
        if n & i != 0 {
            x ^= dt;
        }
        i >>= 1;
    }

    x
}

fn dataget(data: &[usize], i: usize) -> usize {
    // バイト単位のポインタにキャストして読み出し
    unsafe {
        let cb = data.as_ptr() as *const u8;
        *cb.add(i) as usize
    }
}

fn mix_columns(data: &mut [usize]) {
    let mut i4 = 0;
    let mut x = 0;
    for i in 0..NB {
        i4 = i * 4;
        x = mul(dataget(&data, i4 + 0), 2)
            ^ mul(dataget(&data, i4 + 1), 3)
            ^ mul(dataget(&data, i4 + 2), 1)
            ^ mul(dataget(&data, i4 + 3), 1);

        x |= (mul(dataget(&data, i4 + 1), 2)
            ^ mul(dataget(&data, i4 + 2), 3)
            ^ mul(dataget(&data, i4 + 3), 1)
            ^ mul(dataget(&data, i4 + 0), 1))
            << 8;

        x |= (mul(dataget(&data, i4 + 2), 2)
            ^ mul(dataget(&data, i4 + 3), 3)
            ^ mul(dataget(&data, i4 + 0), 1)
            ^ mul(dataget(&data, i4 + 1), 1))
            << 16;

        x |= (mul(dataget(&data, i4 + 3), 2)
            ^ mul(dataget(&data, i4 + 0), 3)
            ^ mul(dataget(&data, i4 + 1), 1)
            ^ mul(dataget(&data, i4 + 2), 1))
            << 24;

        data[i] = x;
    }
}

fn add_round_key(data: &mut [usize], n: usize) {
    let mut i4 = 0;
    for i in (0..NB).step_by(4) {
        for j in 0..4 {
            data[i + j] ^= W.lock().unwrap()[(i + j) + NB * n];
        }
    }
}

fn sub_word(in_: u32) -> u32 {
    let mut cin = in_.to_le_bytes();
    cin[0] = S_BOX[cin[0] as usize];
    cin[1] = S_BOX[cin[1] as usize];
    cin[2] = S_BOX[cin[2] as usize];
    cin[3] = S_BOX[cin[3] as usize];

    u32::from_le_bytes(cin)
}

fn rot_word(in_: u32) -> u32 {
    let inw2: u32 = 0;
    let cin = in_.to_le_bytes();
    let mut cin2 = inw2.to_le_bytes();
    cin2[0] = cin[1];
    cin2[1] = cin[2];
    cin2[2] = cin[3];
    cin2[3] = cin[0];

    u32::from_le_bytes(cin2)
}

fn key_expansion(key: &[u8]) {
    let r_con = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
    let mut temp = 0;
    unsafe {
        let key = key.as_ptr() as *const usize;
        let mut w = W.lock().unwrap();
        let w = w.as_mut_ptr();
        copy_nonoverlapping(key, w, NK * 4);
        for i in NK..NB * (NR + 1) {
            temp = *w.add(i - 1);
            if i % NK == 0 {
                temp = (sub_word(rot_word(temp as u32)) ^ r_con[i / NK - 1]) as usize;
            } else if NK > 6 && i % NK == 4 {
                temp = sub_word(temp as u32) as usize;
            }
            *w.add(i) = *w.add(i - NK) ^ temp;
        }
    }
}
